************************************* 问题1 *************************************
ttk.Button中command属性的误解，之前创建quit按键的时候，command设置为了tkinter.Tk.destroy，我以为这是一个变量，但是查阅资料后发现这是一个函数，指的是点击按键后会定位到这个函数，所以command应该是按键回调函数名

************************************* 问题2 *************************************
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog as fd
from PIL import Image
from PIL import ImageTk
import numpy as np
import struct

''' 创建图窗 '''
# 创建基本的图窗
root = tk.Tk()
root.title("数字图像处理实验二：图像文件读写")  # 设置图窗标题
frame = ttk.Frame(root, padding = 10)
frame.grid()

''' 显示图片 '''
def show_image (image_path):
    image = Image.open(image_path)  # 通过图片路径打开图片
    image_tk = ImageTk.PhotoImage(image)  # 将图像转化为tkinter可用的PhotoImage对象
    image_label = ttk.Label(frame, image = image_tk)
    image_label.grid(row = 1, column = 0)

''' 打开文件 '''
def open_file ():
    file = fd.askopenfilename()
    if file:
        print("读取文件成功，文件路径为：" + file)
    else:
        print("读取文件失败，请确保文件存在或者文件未损坏")
        exit()

    show_image(file)

# 创建“打开文件”按键
open_file_button = ttk.Button(frame, text = "打开文件", command = open_file)  # 将按键的回调定位到open_file函数
open_file_button.grid(row = 0, column = 0)

# 创建“quit”按键
quit_button = ttk.Button(frame, text = "quit", command = root.destroy)
quit_button.grid(row = 2, column = 0)

root.mainloop()

这份代码不能显示图片
两个函数在上述代码中的位置，是经过考虑的，因为与图窗相关的变量必须在图窗的作用下才会起作用，即在
root = tk.Tk()
root.title("数字图像处理实验二：图像文件读写")  # 设置图窗标题
frame = ttk.Frame(root, padding = 10)
frame.grid()
这段代码之后，但是两个函数放在上述位置之后，并没有起到效果

解决方案，在show_image()函数中的第一行添加：global image_tk, image_label，确保image_tk和image_label为全局变量
原来的代码中，image_tk和image_label的作用域只是在函数内部，如果不加global的话，无论放在什么位置都没有作用

************************************* 问题3 *************************************
在显示文本的时候，每次更新图片的时候，似乎有上一次文本的残留

ttk.Label采取覆盖的方式更新文本，如果原文本比新文本长，那么更新之后会有原文本的残留

解决方案：

************************************* 问题4 *************************************
file_data = struct.unpack("B", file.read())报错：struct.error: unpack requires a buffer of 1 bytes

解决方案：
使用struct.unpack的时候，需要指定长度，改成如下形式即可：
file_data = struct.unpack(f"{file_width * file_height}B", file.read())